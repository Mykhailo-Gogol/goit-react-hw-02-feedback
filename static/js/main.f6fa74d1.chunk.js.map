{"version":3,"sources":["components/Section/index.js","components/Statistics/index.js","components/Button/index.js","components/FeedbackOptions/index.js","components/Notification/index.js","App.js","index.js"],"names":["Section","title","children","defaultProps","Statistics","props","good","neutral","bad","total","positivePercentage","positiveFeedbacks","toFixed","useStyles","createUseStyles","button","border","backgroundColor","color","padding","borderRadius","outline","marginRight","Button","handler","buttonTitle","s","onClick","className","type","FeedbackOptions","onLeaveFeedback","onGood","onNeutral","onBad","Notification","message","App","useState","setGood","setBad","setNeutral","handleChange","name","prevState","options","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAEMA,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,MAKPF,EAAQG,aAAe,CACrBF,MAAO,iBAOMD,QCMAI,EAvBI,SAACC,GAAW,IACrBC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBAC7BC,EAAiB,UAAMD,EAAmBE,QAAQ,GAAjC,MAEvB,OACE,gCACE,uCAAUN,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBH,GAAQK,S,OCV/BE,EAAYC,YAAgB,CAChCC,OAAQ,CACNC,OAAQ,OACRC,gBAAiB,YACjBC,MAAO,QACPC,QAAS,CAAC,EAAG,IACbC,aAAc,EACd,WAAY,CACVC,QAAS,OACTJ,gBAAiB,aAEnB,qBAAsB,CACpBK,YAAa,OAgBJC,EAVA,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YACnBC,EAAIb,IAEV,OACE,wBAAQc,QAAS,kBAAMH,KAAWI,UAAWF,EAAEX,OAAQc,KAAK,SAA5D,SACGJ,KCGQK,EAzBS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACjBC,EAA6BD,EAA7BC,OAAQC,EAAqBF,EAArBE,UAAWC,EAAUH,EAAVG,MAE3B,OACE,gCACE,cAAC,EAAD,CAAQV,QAASQ,EAAQP,YAAY,SACrC,cAAC,EAAD,CAAQD,QAASU,EAAOT,YAAY,QACpC,cAAC,EAAD,CAAQD,QAASS,EAAWR,YAAY,gBCRxCU,EAAe,SAAC9B,GACpB,OACE,8BACE,4BAAIA,EAAM+B,aAKhBD,EAAahC,aAAe,CAC1BiC,QAAS,mBAOID,QC4CAE,EAtDH,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACThC,EADS,KACHiC,EADG,OAEMD,mBAAS,GAFf,mBAET9B,EAFS,KAEJgC,EAFI,OAGcF,mBAAS,GAHvB,mBAGT/B,EAHS,KAGAkC,EAHA,KAMVC,EAAe,SAACC,GACP,SAATA,GACFJ,GAAQ,SAACK,GAAD,OAAeA,EAAY,KAExB,QAATD,GACFH,GAAO,SAACI,GAAD,OAAeA,EAAY,KAEvB,YAATD,GACFF,GAAW,SAACG,GAAD,OAAeA,EAAY,MAIpCnC,EAAQH,EAAOE,EAAMD,EAErBG,EAAsBJ,EAAOG,EAAS,IAE5C,OACE,sBAAKmB,UAAU,YAAf,UAEE,cAAC,EAAD,CAAS3B,MAAM,wBAAf,SACE,cAAC,EAAD,CACE4C,QAAS,CAAEvC,OAAME,MAAKD,WACtBwB,gBAAiB,CACfC,OAAQ,kBAAMU,EAAa,SAC3BT,UAAW,kBAAMS,EAAa,YAC9BR,MAAO,kBAAMQ,EAAa,aAKhC,cAAC,EAAD,CAASzC,MAAM,aAAf,SACGK,GAAQC,GAAWC,EAClB,cAAC,EAAD,CACEF,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,cAAC,EAAD,CAAc0B,QAAQ,4BCjDhCU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f6fa74d1.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n};\n\nSection.defaultProps = {\n  title: \"Default title\",\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\n\nconst Statistics = (props) => {\n  const { good, neutral, bad, total, positivePercentage } = props;\n  const positiveFeedbacks = `${positivePercentage.toFixed(0)} %`;\n\n  return (\n    <div>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {good && positiveFeedbacks}</p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import {createUseStyles} from \"react-jss\";\n\nconst useStyles = createUseStyles({\n  button: {\n    border: 'none',\n    backgroundColor: 'lightblue',\n    color: 'black',\n    padding: [5, 10],\n    borderRadius: 2,\n    '&:active': {\n      outline: 'auto',\n      backgroundColor: 'lightcyan'\n    },\n    '&:not(:last-child)': {\n      marginRight: 20\n    }\n  }\n})\n\n\nconst Button = ({ handler, buttonTitle }) => {\n  const s = useStyles()\n\n  return (\n    <button onClick={() => handler()} className={s.button} type=\"button\">\n      {buttonTitle}\n    </button>\n  );\n};\n\nexport default Button;\n","import PropTypes from \"prop-types\";\nimport Button from \"../Button\";\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => {\n  const { onGood, onNeutral, onBad } = onLeaveFeedback;\n\n  return (\n    <div>\n      <Button handler={onGood} buttonTitle=\"good\" />\n      <Button handler={onBad} buttonTitle=\"bad\" />\n      <Button handler={onNeutral} buttonTitle=\"neutral\" />\n    </div>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }),\n  onLeaveFeedback: PropTypes.shape({\n    onGood: PropTypes.func,\n    onNeutral: PropTypes.func,\n    onBad: PropTypes.func,\n  })\n}\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\n\nconst Notification = (props) => {\n  return (\n    <div>\n      <p>{props.message}</p>\n    </div>\n  );\n};\n\nNotification.defaultProps = {\n  message: \"Default message\",\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import \"./App.css\";\nimport { useState } from \"react\";\n\nimport Section from \"./components/Section\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Notification from \"./components/Notification/\";\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n\n\n  const handleChange = (name) => {\n    if (name === \"good\") {\n      setGood((prevState) => prevState + 1);\n    }\n    if (name === \"bad\") {\n      setBad((prevState) => prevState + 1);\n    }\n    if (name === \"neutral\") {\n      setNeutral((prevState) => prevState + 1);\n    }\n  };\n\n  const total = good + bad + neutral;\n\n  const positivePercentage = (good / total) * 100\n\n  return (\n    <div className=\"container\">\n\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={{ good, bad, neutral }}\n          onLeaveFeedback={{\n            onGood: () => handleChange(\"good\"),\n            onNeutral: () => handleChange(\"neutral\"),\n            onBad: () => handleChange(\"bad\"),\n          }}\n        />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {good || neutral || bad ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}